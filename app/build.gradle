plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.graalvm.buildtools.native' version '0.9.28'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.4'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.4'
   
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
   
    //JavaFX
    implementation 'org.openjfx:javafx-base:17:win'
    implementation 'org.openjfx:javafx-controls:17:win'
    implementation 'org.openjfx:javafx-fxml:17:win'
    implementation 'org.openjfx:javafx-graphics:17:win'
    implementation 'org.openjfx:javafx-media:17:win'
    implementation 'org.openjfx:javafx-swing:17:win'
    implementation 'org.openjfx:javafx-web:17:win'

    // Tema 'Transit Theme' para JavaFX - https://github.com/dukke/Transit
    implementation 'com.pixelduke:transit:1.0.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'br.ufsc.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets {
    main {
        resources.srcDirs = ['src\\main\\resources']
    }
}

javafx {
    version = "21.0.1"
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml']
}

// Edita a codificacao para UTF-8
compileJava {
    options.encoding = 'UTF-8'
}
allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

// Configuracoes para criar um jar unico
shadowJar {
    manifest {
        attributes "Main-Class": "br.ufsc.App"
    }

}

// Instrui o plugin graalvmNative a detectar recursos automaticamente
graalvmNative {
    binaries.all {
        resources.autodetect()
    }
    toolchainDetection = false
}

// Forca a deteccao da instalacao do GraalVmNative
graalvmNative {
    binaries {
        main {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(11)
                vendor = JvmVendorSpec.matching("Oracle GraalVM")
            }
        }
    }
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'br.ufsc.App'
    }
    archiveBaseName = 'AbreComposicaoSINAPI'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
